{"meta":{"title":"忧于未形的个人技术交流博客","subtitle":"心怀对字节的敬畏","description":"一位爱编程的中国程序员","author":"Hjing","url":"http://www.cpwip.com","root":"/"},"pages":[{"title":"","date":"2023-01-31T16:52:34.850Z","updated":"2023-01-31T16:29:34.407Z","comments":false,"path":"README.html","permalink":"http://www.cpwip.com/README.html","excerpt":"","text":"HJBlog个人技术分享博客"},{"title":"关于-一米阳光的个人技术交流博客","date":"2023-01-06T15:05:49.000Z","updated":"2023-02-05T06:24:32.574Z","comments":false,"path":"about/index.html","permalink":"http://www.cpwip.com/about/index.html","excerpt":"","text":"本站是什么 我自己刚刚开的一个博客网站，依托Github+Hexo，主要记录平时的技术经验，人生感悟，收集之前开发的技术信息 我是谁 我入行软件开发行业10年，参与过货运进出口软件系统、码头集装箱系统、钢筋加工行业相关的【PCS】,【PLC上位机连接】。 本文作者：Hjing版权声明： 本博客所有文章除特别声明外，转载请注明出处！ 个人爱好 音乐、电影 熟悉.net,vue,.net core 联系方式 VW:iDada0430 欢迎喜欢研究技术的小伙伴来交流学习"}],"posts":[{"title":"谈一谈Vuex中的mutations属性","slug":"2023031402","date":"2023-03-14T07:41:55.000Z","updated":"2023-03-14T08:05:06.957Z","comments":true,"path":"2023/03/14/2023031402/","link":"","permalink":"http://www.cpwip.com/2023/03/14/2023031402/","excerpt":"","text":"一、mutations属性介绍 是唯一一种方式来修改state中的状态的；在组件的自定义方法中，使用this.$store.commit(‘对应mutations中的方法’, 新的值)方法，把新的值提交给mutations中相对应的方法，mutations属性中的每个方法中有两个参数，分比为state和payload；state其实就是vuex中的state属性，payload叫做mutations的载荷，其实就是传过来的值。一般payload传的是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读： mutations: &#123; increment(state, payload) &#123; state.count += payload.amount &#125; &#125; store.commit('increment', &#123; amount: 10 &#125;) 二、对象风格的提交方式 提交 mutation 的另一种方式是直接使用包含 type 属性的对象： store.commit(&#123; type: 'increment', amount: 10 &#125;) 当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变： mutations: &#123; increment (state, payload) &#123; state.count += payload.amount &#125; &#125; 三、使用常量替代 Mutation 事件类型 使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然： // mutation-types.js export const SOME_MUTATION = 'SOME_MUTATION' // store.js import Vuex from 'vuex' import &#123; SOME_MUTATION &#125; from './mutation-types' const store = new Vuex.Store(&#123; state: &#123; ... &#125;, mutations: &#123; // 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名 [SOME_MUTATION] (state) &#123; // mutate state &#125; &#125; &#125;) 用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。 四、 Mutation 必须是同步函数 一条重要的原则就是要记住 mutation 必须是同步函数。为什么？请参考下面的例子： mutations: &#123; someMutation (state) &#123; api.callAsyncMethod(() =&gt; &#123; state.count++ &#125;) &#125; &#125; 现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。 五、在组件中提交 Mutation 你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。 import &#123; mapMutations &#125; from 'vuex' export default &#123; // … methods: &#123; …mapMutations([ ‘increment’, // 将 this.increment() 映射为 this.$store.commit(&#39;increment&#39;) &lt;span class=&quot;token comment&quot;&gt;// `mapMutations` 也支持载荷：&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;incrementBy&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#39;incrementBy&#39;, amount)`&lt;/span&gt; &lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt; &lt;span &gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapMutations&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#123;&lt;!-- --&gt;&lt;/span&gt; add&lt;span&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;increment&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 将 `this.add()` 映射为 `this.$store.commit(&#39;increment&#39;)`&lt;/span&gt; &lt;span&gt;&#125;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt; }}","categories":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/categories/vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/tags/vue3/"},{"name":"nodejs","slug":"nodejs","permalink":"http://www.cpwip.com/tags/nodejs/"}]},{"title":"Vue3的状态管理-Store，Vuex和Pinia的对比","slug":"2023031401","date":"2023-03-14T07:35:55.000Z","updated":"2023-03-14T08:16:42.390Z","comments":true,"path":"2023/03/14/2023031401/","link":"","permalink":"http://www.cpwip.com/2023/03/14/2023031401/","excerpt":"","text":"Vue3的状态管理-Store，Vuex和Pinia的对比 什么是状态管理 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它是一个独立的单元，由以下几个部分组成 状态：驱动整个应用的数据源；视图：对状态的一种声明式映射；交互：状态根据用户在视图中的输入而作出相应变更的可能方式。 Vuex和Pinia的区别 &nbsp; &nbsp; Vuex： &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.由state,getters,mutations,actions,modules组成 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2.通过mutations修改state &nbsp; &nbsp; &nbsp; &nbsp;优点： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持调试功能，如时间旅行和编辑 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;适用于大型、高复杂度的Vue.js项目 &nbsp;&nbsp;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缺点： &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;服务器端呈现的，则会将您的应用程序暴露给安全漏洞 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。 &nbsp; &nbsp; Pinia：&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.由state，getters，actions组成 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.通过getters,actions修改state，也可以通过$patch &nbsp; &nbsp; &nbsp; &nbsp; 优点： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完整的 TypeScript 支持：与在 Vuex 中添加 TypeScript 相比，添加 TypeScript 更容易 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;极其轻巧(体积约 1KB) &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;store 的 action 被调度为常规的函数调用，而不是使用 dispatch 方法或 MapAction 辅助函数，这在 Vuex 中很常见 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持多个Store &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持 Vue devtools、SSR 和 webpack 代码拆分 &nbsp; &nbsp; &nbsp; &nbsp; 缺点： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不支持时间旅行和编辑等调试功能 Vuex状态管理 &nbsp; &nbsp; &nbsp; &nbsp; 对于已经有过Vue2项目经验的来说，可能Vuex更加熟悉。 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式 + 库。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。 &nbsp; &nbsp; &nbsp; &nbsp; 安装： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npm install vuex@next --save &nbsp; &nbsp; &nbsp; &nbsp; 开始： 主页面： &lt;template&gt; &nbsp; &lt;div class=\"home\"&gt; &nbsp; &nbsp; &lt;div&gt;Store:&lt;/div&gt; &nbsp; &nbsp; &lt;ChildViewVue&gt;&lt;/ChildViewVue&gt; &nbsp; &lt;/div&gt; &lt;/template&gt; &lt;script lang=\"ts\" setup&gt; import { reactive, ref, computed } from 'vue'; import ChildViewVue from './ChildView.vue'; import { useStore } from 'vuex'; const store = useStore(); console.log('const store = useStore();', store.state.count) const count = computed(() =&gt; store.state.count) &lt;/script&gt; 子页面： &lt;template&gt; &nbsp; &lt;div class=\"ChildView\"&gt; &nbsp; &nbsp; &lt;button @click=\"clickChange\"&gt;修改store&lt;/button&gt; &nbsp; &lt;/div&gt; &lt;/template&gt; &lt;script lang=\"ts\" name=\"ChildView\" setup&gt; import { ref, watch } from 'vue' import { useStore } from 'vuex'; const store = useStore(); const clickChange = () =&gt; { &nbsp; let random = Math.floor(Math.random() * 10 + 1) &nbsp; store.commit('CHANGE_COUNT',random) } &lt;/script&gt; store: import { createStore } from 'vuex'; export default createStore({ &nbsp; state: { &nbsp; &nbsp; count: 0 &nbsp; }, &nbsp; getters: {}, &nbsp; mutations: { &nbsp; &nbsp; CHANGE_COUNT(state: { count: any }, data: any) { &nbsp; &nbsp; &nbsp; state.count = data; &nbsp; &nbsp; } &nbsp; }, &nbsp; actions: {}, &nbsp; modules: {} }); Pinia状态管理 &nbsp; &nbsp; &nbsp;Pinia 是 Vue 的存储库，它允许您跨组件/页面共享状态。如果您熟悉 Composition API，您可能会认为您已经可以使用简单的export const state = reactive(&#123;&#125;).&nbsp;这对于单页应用程序来说是正确的，但如果它是服务器端呈现的，则会将您的应用程序暴露给安全漏洞。 更强的团队协作约定与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试模块热更新 (HMR)服务端渲染支持 npm install pinia 主页面： &lt;template&gt; &nbsp; &lt;div class=\"home\"&gt; &nbsp; &nbsp; &lt;div&gt;pinia：&lt;/div&gt; &nbsp; &nbsp; &lt;ChildViewVue&gt;&lt;/ChildViewVue&gt; &nbsp; &lt;/div&gt; &lt;/template&gt; &lt;script lang=\"ts\" setup&gt; import { reactive, ref, computed } from 'vue'; import ChildViewVue from './ChildView.vue'; import { changeNum } from \"@/store\"; import { storeToRefs } from 'pinia' const store = changeNum() const { count } = storeToRefs(store) &lt;/script&gt; 子页面 &lt;template&gt; &nbsp; &lt;div class=\"ChildView\"&gt; &nbsp; &nbsp; &lt;button @click=\"clickChange\"&gt;修改store&lt;/button&gt; &nbsp; &lt;/div&gt; &lt;/template&gt; &lt;script lang=\"ts\" name=\"ChildView\" setup&gt; import { ref, watch } from 'vue' import { changeNum } from \"@/store\"; const store = changeNum() const clickChange = () =&gt; { &nbsp; let random = Math.floor(Math.random() * 10 + 1) &nbsp; store.CHANGE_COUNT(random) } &lt;/script&gt; store import { defineStore } from 'pinia'; export const changeNum = defineStore('main', { &nbsp; state: () =&gt; ({ count: 0 }), &nbsp; getters: {}, &nbsp; actions: { &nbsp; &nbsp; CHANGE_COUNT(data: any) { &nbsp; &nbsp; &nbsp; this.count = data; &nbsp; &nbsp; } &nbsp; } }); main.ts import { createApp } from 'vue' import App from './App.vue' import router from './router' import { createPinia } from 'pinia' createApp(App).use(createPinia()).use(router).mount('#app') 总结 &nbsp; &nbsp; &nbsp; &nbsp; 根据Vue官方回答： &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现有用户可能对&nbsp;Vuex&nbsp;更熟悉，它是 Vue 之前的官方状态管理库。由于 Pinia 在生态系统中能够承担相同的职责且能做得更好，因此 Vuex 现在处于维护模式。它仍然可以工作，但不再接受新的功能。对于新的应用，建议使用 Pinia &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实上，Pinia 最初正是为了探索 Vuex 的下一个版本而开发的，因此整合了核心团队关于 Vuex 5 的许多想法。最终，我们意识到 Pinia 已经实现了我们想要在 Vuex 5 中提供的大部分内容，因此决定将其作为新的官方推荐。 相比于 Vuex，Pinia 提供了更简洁直接的 API，并提供了组合式风格的 API，最重要的是，在使用 TypeScript 时它提供了更完善的类型推导 &nbsp; &nbsp; &nbsp; &nbsp; 总得来说，Vuex目前是能够满足我们日常项目需求，等Vuex下一个版本，可能就要使用Pinia了。","categories":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/categories/vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/tags/vue3/"},{"name":"nodejs","slug":"nodejs","permalink":"http://www.cpwip.com/tags/nodejs/"}]},{"title":"在vue3中如何使用Ant Design?","slug":"2023022501","date":"2023-02-25T06:47:23.000Z","updated":"2023-03-14T07:41:39.289Z","comments":true,"path":"2023/02/25/2023022501/","link":"","permalink":"http://www.cpwip.com/2023/02/25/2023022501/","excerpt":"","text":"在vue3中如何使用Ant Design？","categories":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/categories/vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/tags/vue3/"},{"name":"nodejs","slug":"nodejs","permalink":"http://www.cpwip.com/tags/nodejs/"}]},{"title":"vue3如何部署到windows服务器上","slug":"2023021602","date":"2023-02-16T06:53:16.000Z","updated":"2023-02-16T08:49:56.069Z","comments":true,"path":"2023/02/16/2023021602/","link":"","permalink":"http://www.cpwip.com/2023/02/16/2023021602/","excerpt":"","text":"这里介绍部署到windows服务器上 部署到IIS 1.生成部署的静态文件 在vite.config.js里配置输出文件的目录 在项目的目录内右键点击\"Git Bash Here\" 执行 npm run build，生成的文件就要部署的文件了 2.部署到服务器的IIS 确认服务器是否安装了IIS，安装后在IIS里新建网站,物理目录指向部署的文件目录，就可以正常访问了。 部署到Nginx 1.安装Nginx Nginx下载地址我用1.23.3版本 下载后解压到部署的盘内，将vue项目打包后，把目录dist拷贝到html里面 2.配置Nginx 因为现在是把vue前端交给了Nginx代理，所以这里的端口号不一定是我们在vue项目中设置的端口号。这里的端口号必须是当前服务器开放的端口号。 server_name是服务器的外网ip地址， listen是开发的端口号，root配置项目的实际文件目录 启动Nginx 打开Nginx安装路径下的命令行 执行：start nginx最后在浏览器输入地址和端口就可以访问了","categories":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/categories/vue3/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/tags/vue3/"},{"name":"nodejs","slug":"nodejs","permalink":"http://www.cpwip.com/tags/nodejs/"}]},{"title":"C# 生成日志文件的方式","slug":"2023021601","date":"2023-02-16T03:56:10.000Z","updated":"2023-02-20T14:27:21.354Z","comments":true,"path":"2023/02/16/2023021601/","link":"","permalink":"http://www.cpwip.com/2023/02/16/2023021601/","excerpt":"","text":"C# 生成日志文件的方式 using System.IO; using System.Text; public static void WriteLog(string message) &#123; try &#123; string path = AppDomain.CurrentDomain.BaseDirectory + &quot;Log&quot; + &quot;\\\\&quot;; if (!Directory.Exists(path)) Directory.CreateDirectory(path); path = path + DateTime.Now.ToString(&quot;yyyy-MM-dd&quot;) + &quot;\\\\&quot;; if (!Directory.Exists(path)) Directory.CreateDirectory(path); string logFileName = path + DateTime.Now.ToString(&quot;HH-00-00&quot;) + &quot;.log&quot;; using (TextWriter logFile = TextWriter.Synchronized(File.AppendText(logFileName))) &#123; logFile.WriteLine(DateTime.Now + &quot;\\t&quot; + message); logFile.Flush(); logFile.Close(); &#125; &#125; catch (Exception ex) &#123; &#125; &#125;","categories":[{"name":"C#","slug":"C","permalink":"http://www.cpwip.com/categories/C/"}],"tags":[{"name":"C#","slug":"C","permalink":"http://www.cpwip.com/tags/C/"}]},{"title":"昨天的你","slug":"2023021002","date":"2023-02-10T11:52:53.000Z","updated":"2023-02-16T03:35:52.510Z","comments":true,"path":"2023/02/10/2023021002/","link":"","permalink":"http://www.cpwip.com/2023/02/10/2023021002/","excerpt":"","text":"我似乎记不清你的模样， 因为白天总是看见阳光， 黑夜里隐隐闪烁你的獠牙。 如果眼瞎了，是不是脑海里会总浮现你的面孔， 还有那双坚定的眼眸。 你应该一如既往地奔跑着， 前方有你的目标，后面还是有一双手推着吗？ 还是你自己情愿如此疲惫不堪下去。 远行不是目的，目的是为了归来，归来时仍然从容，从容为了更好的远行。 孤独是因为没有人懂得你的苦心 爱情是这个世界上最脆弱的情感，容易被情绪左右，容易受旁言困惑，容易被诱惑困住， 所以才更容易失去信心，因此爱情才是最被世人所渴望的情感。 那时，像春天的一缕晨光，相见短暂，总能时时刻刻地去思念忧虑;","categories":[{"name":"心屋","slug":"心屋","permalink":"http://www.cpwip.com/categories/%E5%BF%83%E5%B1%8B/"}],"tags":[{"name":"情感","slug":"情感","permalink":"http://www.cpwip.com/tags/%E6%83%85%E6%84%9F/"},{"name":"诗歌","slug":"诗歌","permalink":"http://www.cpwip.com/tags/%E8%AF%97%E6%AD%8C/"}]},{"title":"vue3使用经验与问题总结","slug":"2023021001","date":"2023-02-10T06:45:03.000Z","updated":"2023-02-16T03:35:03.296Z","comments":true,"path":"2023/02/10/2023021001/","link":"","permalink":"http://www.cpwip.com/2023/02/10/2023021001/","excerpt":"","text":"vue的使用经验 开始接触vue比较晚，上手的问题总是反反复复的出现，甚至还会被迫创建无数次项目 vue的常用命令 1.安装nodejs最新的长期维护版 https://nodejs.org/zh-cn/ 根据安装的目录，检查设置的环境变量 2.安装yarn 右键nodejs 管理员身份运行，npm install -g yarn 查看yarn 版本 yarn -v 3.安装vue-cli 输入 npm i -g @vue/cli 或npm install -g @vue/cli@5.0.8 查看vue 版本 vue --version 4.安装vite 输入：npm install -g vite 查询vite版本 5.建议重启一下电脑 【如果需要获取github路径的vue项目，如果有package-lock.json则删除掉，执行npm install】 【如果运行有错误执行语句 npm install --legacy-peer-deps element-ui --save】 6.创建项目 打开Nodejs命令窗口，执行vue ui,打开UI页面","categories":[{"name":"vue","slug":"vue","permalink":"http://www.cpwip.com/categories/vue/"}],"tags":[{"name":"vue","slug":"vue","permalink":"http://www.cpwip.com/tags/vue/"}]},{"title":"c# ArrarList和string string[]和ArrarList","slug":"2023020501","date":"2023-02-05T06:21:02.000Z","updated":"2023-02-05T06:39:47.812Z","comments":true,"path":"2023/02/05/2023020501/","link":"","permalink":"http://www.cpwip.com/2023/02/05/2023020501/","excerpt":"","text":"ArrarList和string string转ArrarList ArrayList b = new ArrayList(str.Split(',')); ArrarList转string string str= string.Join(\",\",(string[])list.ToArray(typeof(string))); ArrarList和string[] ArrarList转string[] string[] arrString =(string[])list.ToArray(typeof(string)); string[]转ArrarList ArrayList list = new ArrayList(new string[]{\"111\",\"222\"});","categories":[{"name":"关于","slug":"关于","permalink":"http://www.cpwip.com/categories/%E5%85%B3%E4%BA%8E/"}],"tags":[{"name":"关于","slug":"关于","permalink":"http://www.cpwip.com/tags/%E5%85%B3%E4%BA%8E/"},{"name":"网站介绍","slug":"网站介绍","permalink":"http://www.cpwip.com/tags/%E7%BD%91%E7%AB%99%E4%BB%8B%E7%BB%8D/"}]},{"title":"我开了自己的博客了","slug":"hello-world","date":"2023-01-31T16:31:07.396Z","updated":"2023-02-05T07:44:27.091Z","comments":true,"path":"2023/02/01/hello-world/","link":"","permalink":"http://www.cpwip.com/2023/02/01/hello-world/","excerpt":"","text":"初衷 拥有属于自己的一个博客域名，分享一些技术开发的心得 突然想自己弄一个博客了，感觉起步有点晚了，又新发现的博客组合Hexo+Github，所以照着网上搜的教程一步一步的实现， 我的域名是https://www.cpwip.com/是在华为云买的，前期看看博客的情况再是否需要购买独立的服务器","categories":[{"name":"关于","slug":"关于","permalink":"http://www.cpwip.com/categories/%E5%85%B3%E4%BA%8E/"}],"tags":[{"name":"关于","slug":"关于","permalink":"http://www.cpwip.com/tags/%E5%85%B3%E4%BA%8E/"},{"name":"网站介绍","slug":"网站介绍","permalink":"http://www.cpwip.com/tags/%E7%BD%91%E7%AB%99%E4%BB%8B%E7%BB%8D/"}]}],"categories":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/categories/vue3/"},{"name":"C#","slug":"C","permalink":"http://www.cpwip.com/categories/C/"},{"name":"心屋","slug":"心屋","permalink":"http://www.cpwip.com/categories/%E5%BF%83%E5%B1%8B/"},{"name":"vue","slug":"vue","permalink":"http://www.cpwip.com/categories/vue/"},{"name":"关于","slug":"关于","permalink":"http://www.cpwip.com/categories/%E5%85%B3%E4%BA%8E/"}],"tags":[{"name":"vue3","slug":"vue3","permalink":"http://www.cpwip.com/tags/vue3/"},{"name":"nodejs","slug":"nodejs","permalink":"http://www.cpwip.com/tags/nodejs/"},{"name":"C#","slug":"C","permalink":"http://www.cpwip.com/tags/C/"},{"name":"情感","slug":"情感","permalink":"http://www.cpwip.com/tags/%E6%83%85%E6%84%9F/"},{"name":"诗歌","slug":"诗歌","permalink":"http://www.cpwip.com/tags/%E8%AF%97%E6%AD%8C/"},{"name":"vue","slug":"vue","permalink":"http://www.cpwip.com/tags/vue/"},{"name":"关于","slug":"关于","permalink":"http://www.cpwip.com/tags/%E5%85%B3%E4%BA%8E/"},{"name":"网站介绍","slug":"网站介绍","permalink":"http://www.cpwip.com/tags/%E7%BD%91%E7%AB%99%E4%BB%8B%E7%BB%8D/"}]}