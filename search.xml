<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[谈一谈Vuex中的mutations属性]]></title>
      <url>/2023/03/14/2023031402/</url>
      <content type="html"><![CDATA[ <h3><a name="t0"></a><a id="mutations_0"></a>一、mutations属性介绍</h3> 
<blockquote> 
 <p>是唯一一种方式来修改state中的状态的；在组件的自定义方法中，使用this.$store.<a href="/2023/03/14/2023031402/" target="_blank"   data-tit="commit" data-pretit="commit">commit</a>(‘对应mutations中的方法’, 新的值)方法，把新的值提交给mutations中相对应的方法，mutations属性中的每个方法中有两个参数，分比为state和payload；state其实就是vuex中的state属性，payload叫做mutations的载荷，其实就是传过来的值。一般payload传的是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读：</p> 
</blockquote> 
<pre data-index="0" class="prettyprint">
    <code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">
        mutations<span>:</span> 
        <span>&#123;<!-- --></span>
  <span class="token function">increment</span><span>(</span>state<span>,</span> payload<span>)</span>
   <span>&#123;<!-- --></span>
    state<span>.</span>count <span >+=</span> payload<span>.</span>amount
  <span>&#125;</span>
<span>&#125;</span>
</pre> 
<pre data-index="1" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">store<span>.</span><span class="token function">commit</span><span>(</span><span class="token string">'increment'</span><span>,</span> <span>&#123;<!-- --></span>
  amount<span>:</span> <span class="token number">10</span>
<span>&#125;</span><span>)</span>
</pre> 
<h3><a name="t1"></a><a id="_17"></a>二、对象风格的提交方式</h3> 
<p>提交 mutation 的另一种方式是直接使用包含 type 属性的对象：</p> 
<pre data-index="2" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">store<span>.</span><span class="token function">commit</span><span>(</span><span>&#123;<!-- --></span>
  type<span>:</span> <span class="token string">'increment'</span><span>,</span>
  amount<span>:</span> <span class="token number">10</span>
<span>&#125;</span><span>)</span>
</pre> 
<p>当使用对象风格的提交方式，整个对象都作为载荷传给 mutation 函数，因此 handler 保持不变：</p> 
<pre data-index="3" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">mutations<span>:</span> <span>&#123;<!-- --></span>
  <span class="token function">increment</span> <span>(</span>state<span>,</span> payload<span>)</span> <span>&#123;<!-- --></span>
    state<span>.</span>count <span >+=</span> payload<span>.</span>amount
  <span>&#125;</span>
<span>&#125;</span>
</pre> 
<h3><a name="t2"></a><a id="_Mutation__37"></a>三、使用常量替代 Mutation 事件类型</h3> 
<p>使用常量替代 mutation 事件类型在各种 Flux 实现中是很常见的模式。这样可以使 linter 之类的工具发挥作用，同时把这些常量放在单独的文件中可以让你的代码合作者对整个 app 包含的 mutation 一目了然：</p> 
<pre data-index="4" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token comment">// mutation-types.js</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">SOME_MUTATION</span> <span >=</span> <span class="token string">'SOME_MUTATION'</span>
</pre> 
<pre data-index="5" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token comment">// store.js</span>
<span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span>
<span class="token keyword">import</span> <span>&#123;<!-- --></span> <span class="token constant">SOME_MUTATION</span> <span>&#125;</span> <span class="token keyword">from</span> <span class="token string">'./mutation-types'</span>
</pre> 
<pre data-index="6" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">const</span> store <span >=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span>.</span>Store</span><span>(</span><span>&#123;<!-- --></span>
  state<span>:</span> <span>&#123;<!-- --></span> <span >...</span> <span>&#125;</span><span>,</span>
  mutations<span>:</span> <span>&#123;<!-- --></span>
    <span class="token comment">// 我们可以使用 ES2015 风格的计算属性命名功能来使用一个常量作为函数名</span>
    <span>[</span><span class="token constant">SOME_MUTATION</span><span>]</span> <span>(</span>state<span>)</span> <span>&#123;<!-- --></span>
      <span class="token comment">// mutate state</span>
    <span>&#125;</span>
  <span>&#125;</span>
<span>&#125;</span><span>)</span>
</pre> 
<blockquote> 
 <p>用不用常量取决于你——在需要多人协作的大型项目中，这会很有帮助。但如果你不喜欢，你完全可以不这样做。</p> 
</blockquote> 
<h3><a name="t3"></a><a id="_Mutation__66"></a>四、 Mutation 必须是同步函数</h3> 
<p>一条重要的原则就是要记住 mutation 必须是<strong>同步函数</strong>。为什么？请参考下面的例子：</p> 
<pre data-index="7" class="prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;">mutations<span>:</span> <span>&#123;<!-- --></span>
  <span class="token function">someMutation</span> <span>(</span>state<span>)</span> <span>&#123;<!-- --></span>
    api<span>.</span><span class="token function">callAsyncMethod</span><span>(</span><span>(</span><span>)</span> <span >=&gt;</span> <span>&#123;<!-- --></span>
      state<span>.</span>count<span >++</span>
    <span>&#125;</span><span>)</span>
  <span>&#125;</span>
<span>&#125;</span>
</pre> 
<p>现在想象，我们正在 debug 一个 app 并且观察 devtool 中的 mutation 日志。每一条 mutation 被记录，devtools 都需要捕捉到前一状态和后一状态的快照。然而，在上面的例子中 mutation 中的异步函数中的回调让这不可能完成：因为当 mutation 触发的时候，回调函数还没有被调用，devtools 不知道什么时候回调函数实际上被调用——实质上任何在回调函数中进行的状态的改变都是不可追踪的。</p> 
<h3><a name="t4"></a><a id="_Mutation_80"></a>五、在组件中提交 Mutation</h3> 
<p>你可以在组件中使用 this.$store.commit(‘xxx’) 提交 mutation，或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。</p> 
<pre data-index="8" class="set-code-hide prettyprint"><code class="prism language-javascript has-numbering" onclick="mdcp.copyCode(event)" style="position: unset;"><span class="token keyword">import</span> <span>&#123;<!-- --></span> mapMutations <span>&#125;</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>

<p><span class="token keyword">export</span> <span class="token keyword">default</span> <span>&#123;<!-- --></span><br>  <span class="token comment">// …</span><br>  methods<span>:</span> <span>&#123;<!-- --></span><br>    <span >…</span><span class="token function">mapMutations</span><span>(</span><span>[</span><br>      <span class="token string">‘increment’</span><span>,</span> <span class="token comment">// 将 <code>this.increment()</code> 映射为 <code>this.$store.commit(&#39;increment&#39;)</code></span></p>
<pre><code class="hljs">  &lt;span class=&quot;token comment&quot;&gt;// `mapMutations` 也支持载荷：&lt;/span&gt;
  &lt;span class=&quot;token string&quot;&gt;&#39;incrementBy&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 将 `this.incrementBy(amount)` 映射为 `this.$store.commit(&#39;incrementBy&#39;, amount)`&lt;/span&gt;
&lt;span&gt;]&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;&lt;span&gt;,&lt;/span&gt;
&lt;span &gt;...&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mapMutations&lt;/span&gt;&lt;span&gt;(&lt;/span&gt;&lt;span&gt;&#123;&lt;!-- --&gt;&lt;/span&gt;
  add&lt;span&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;increment&#39;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 将 `this.add()` 映射为 `this.$store.commit(&#39;increment&#39;)`&lt;/span&gt;
&lt;span&gt;&#125;&lt;/span&gt;&lt;span&gt;)&lt;/span&gt;
</code></pre>
<p>  <span>}</span><br><span>}</span><br></pre></p>
]]></content>
      
        <categories>
            
            <category> vue3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[在vue3中如何使用Ant Design?]]></title>
      <url>/2023/02/25/2023022501/</url>
      <content type="html"><![CDATA[<H3>在vue3中如何使用Ant Design？</H3>

<p><a href="https://ant.design/"" target="_blank" data-tit="Ant" data-pretit="ant">Ant</a> Design 是一个开源库，可让您创建吸引人的响应式网站。如果您想使用经过充分测试且易于学习的框架，那么它是您下一个项目的绝佳选择。</p> 
<p>另一方面，Vue.js 是一个用于创建用户界面的渐进式框架。它旨在易于学习，同时具有灵活性和可定制性。将这两者结合使用可以让您比以往更快地创建响应式网站。</p> 
<p>Ant Design 和 Vue 3 中包含的 Composition API 使得在编写有限代码的同时创建美观、响应迅速且可扩展的应用程序变得简单。</p> 
<p>在这个简短的指南中，我们将了解如何在 Vue 3 应用程序中使用 <a href="https://www.cpwip.com/2023/02/25/2023022501/" target="_blank" class="hl hl-1"  data-tit="ant-design-vue" data-pretit="ant-design-vue">ant-design-vue</a> 包以及如何使用 Ant 图标系统。</p> 
<ul><li> <p>入门</p> 
  <ul><li> <p>创建一个新的 Vue 3 应用程序</p> </li><li> <p>安装 ant-design-vue</p> </li></ul></li><li> <p>Ant Design 组件</p> </li><li> <p>表单处理</p> </li><li> <p>蚂蚁设计图标</p> </li></ul>
<h2><a name="t0"></a>入门</h2> 
<p>还值得一提的是，这里描述的所有方法都适用于使用 Vue CLI 和 Vite 生成的 Vue 3 项目。</p> 
<h3><a name="t1"></a>创建一个新的 Vue 3 应用程序</h3> 
<p>让我们开始运行以下命令来创建一个新的 Vue 3 应用程序：</p> 
<pre data-index="0">vue 创建我的应用
# 或者 Vite
npm 初始化vue@3</pre> 
<p>如果您使用的是 Vue CLI，请务必选择 Vue 3 作为您的首选预设，如下面的屏幕截图所示：</p> 
<p></p> 
<h3><a name="t2"></a>安装 ant-design-vue</h3> 
<p>您可以使用以下命令轻松地将 ant-design-vue 包添加到您的 Vue 3 项目中：</p> 
<pre data-index="1">npm 安装 ant-design-vue
＃ 或者
纱线添加 ant-design-vue</pre> 
<p>一旦安装完成，我们就可以开始在我们的项目中注册它了。</p> 
<p>一种方法是在我们的项目中全局注册包，以便我们可以从任何地方引用它的组件。<a class="link-info" href="https://www.yangtou0.com/yt/10a5128.html" title="Bgsub在线抠图(bgsub.cn)，原画抠图换背景免费保存，最高支持4096x4096分辨率！"><span style="color:#494949;">Bgsub在线抠图(bgsub.cn)，原画抠图换背景免费保存，最高支持4096x4096分辨率！</span></a>这可以通过src/main.js使用以下代码更新入口文件来实现：</p> 
<pre data-index="2">从“vue”导入 { createApp }；
从“./App.vue”导入应用程序；
&ZeroWidthSpace;
从“ant-design-vue”导入 Antd；
导入“ant-design-vue/dist/antd.css”；
&ZeroWidthSpace;
const app = createApp(App);
app.use(Antd).mount("#app");</pre> 
<p>这样，我们就可以在我们的应用程序中开始使用它的组件，而无需进行任何额外的导入：</p> 
<pre data-index="3">&lt;!-- 组件/Sample.vue --&gt;
&lt;模板&gt;
 &nbsp;&lt;a-button type="primary"&gt;主按钮&lt;/a-button&gt;
 &nbsp;&lt;a-button&gt;默认按钮&lt;/a-button&gt;
 &nbsp;&lt;a-button type="dashed"&gt;虚线按钮&lt;/a-button&gt;
&lt;/模板&gt;</pre> 
<p>您还可以按需导入单个组件：</p> 
<pre data-index="4">&lt;!-- 组件/Sample.vue --&gt;
&lt;模板&gt;
 &nbsp;&lt;div&gt;
 &nbsp; &nbsp;&lt;Button type="primary"&gt;主按钮&lt;/Button&gt;
 &nbsp; &nbsp;&lt;Button&gt;默认按钮&lt;/Button&gt;
 &nbsp; &nbsp;&lt;Button type="dashed"&gt;虚线按钮&lt;/Button&gt;
 &nbsp;&lt;/div&gt;
&lt;/模板&gt;
&ZeroWidthSpace;
&lt;脚本设置&gt;
从“ant-design-vue”导入{按钮}；
导入“ant-design-vue/dist/antd.css”；
&lt;/脚本&gt;</pre> 
<p>您可能已经注意到，我们还将 Ant Design CSS 文件导入到这个单一文件组件中，并且对我们所有的组件文件都做同样的事情是没有意义的。<a class="link-info" href="https://www.yangtou0.com/yt/10a5118.html" title="打包34款必备神器，全是电脑必装软件，系统优化办公有这些足够了！"><span style="color:#494949;">打包34款必备神器，全是电脑必装软件，系统优化办公有这些足够了！</span></a>为了解决这个问题，只需将 Ant Design CSS 文件导入到src/main.js文件中，文件内容如下所示：</p> 
<pre data-index="5">从“vue”导入 { createApp }；
从“./App.vue”导入应用程序；
&ZeroWidthSpace;
导入“ant-design-vue/dist/antd.css”；
&ZeroWidthSpace;
createApp(App).mount("#app");</pre> 
<p>为避免进行额外的导入，我们假设 ant-design-vue 已在本文前面的代码示例中全局注册。</p> 
<h2><a name="t3"></a>Ant Design 组件</h2> 
<p>Ant Design 组件套件包括几个元素，如按钮、列表、卡片等等，它们都有不同的颜色和大小。图标也可以在主界面以及其他组件中使用。但是，让我们开始探索基础知识，同时将自定义 Vue 方法和响应式数据附加到它们：</p> 
<pre data-index="6" class="set-code-hide" name="code">&lt;模板&gt;
  &lt;div&gt;
 &nbsp;  &lt;一行&gt;
 &nbsp; &nbsp;  &lt;a-col span="12"&gt;
 &nbsp; &nbsp; &nbsp;  &lt;div v-for="(alert, i) in alerts" :key="i"&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;  &lt;警报
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  :message="警报 + '消息'"
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  description="Lorem ipsum dolor sit amet."
 &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;  :type="警报"
 &nbsp; &nbsp; &nbsp; &nbsp;  /&gt;
 &nbsp; &nbsp; &nbsp;  &lt;/div&gt;
 &nbsp; &nbsp;  &lt;/a-col&gt;
 &nbsp; &nbsp;  &lt;a-col span="12"&gt;
 &nbsp; &nbsp; &nbsp;  &lt;a-button type="primary" @click="message = 'Hello!'"&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;  {<!-- -->{ 信息 }}
 &nbsp; &nbsp; &nbsp;  &lt;/a-按钮&gt;
 &nbsp; &nbsp; &nbsp;  &lt;a-骨架头像 :paragraph="{ rows: 4 }" /&gt;
 &nbsp; &nbsp;  &lt;/a-col&gt;
 &nbsp;  &lt;/a-row&gt;
  &lt;/div&gt;
&lt;/模板&gt;
&ZeroWidthSpace;
&lt;脚本设置&gt;
从“vue”导入 { ref }；
&ZeroWidthSpace;
const alerts = ref(["success", "info", "warning", "error"]);
const message = ref("点击我！");
&lt;/脚本&gt;<div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div></pre> 
<p>上面的代码示例演示了如何使用 Vue 3 设置糖语法进行简单的迭代以及将自定义事件附加到 ant-design-vue 组件。我们开发了一个双列网格系统，其中第一列显示一个按钮和一个骨架加载器组件，而第二列基本上遍历我们的警报数组并使用它们的数据来呈现自定义警报组件。</p> 
<p>如果我们运行我们的应用程序，我们将得到以下结果：</p> 
<p></p> 
<h2><a name="t4"></a>表单处理</h2> 
<p>处理表单数据是任何应用程序中必不可少的操作。下面是一个如何使用 ant-design-vue 创建基本表单组件并处理其数据的示例：</p> 
<pre data-index="7" class="set-code-hide" name="code">&lt;模板&gt;
 &nbsp;&lt;div&gt;
 &nbsp; &nbsp;&lt;a-form
 &nbsp; &nbsp; &nbsp;:model="formData"
 &nbsp; &nbsp; &nbsp;名称="基本"
 &nbsp; &nbsp; &nbsp;自动完成=“关闭”
 &nbsp; &nbsp; &nbsp;@finish="onSubmit"
 &nbsp; &nbsp; &nbsp;@finishFailed="onError"
 &nbsp; &nbsp;&gt;
 &nbsp; &nbsp; &nbsp;&lt;一个表单项
 &nbsp; &nbsp; &nbsp; &nbsp;标签="用户名"
 &nbsp; &nbsp; &nbsp; &nbsp;名称="用户名"
 &nbsp; &nbsp; &nbsp; &nbsp;:rules="[{ required: true, message: '请输入您的用户名！' }]"
 &nbsp; &nbsp; &nbsp;&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;a-input v-model:value="formData.username" /&gt;
 &nbsp; &nbsp; &nbsp;&lt;/a-form-item&gt;
&ZeroWidthSpace;
 &nbsp; &nbsp; &nbsp;&lt;一个表单项
 &nbsp; &nbsp; &nbsp; &nbsp;标签="密码"
 &nbsp; &nbsp; &nbsp; &nbsp;名称="密码"
 &nbsp; &nbsp; &nbsp; &nbsp;:rules="[{ required: true, message: '请输入您的密码！' }]"
 &nbsp; &nbsp; &nbsp;&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;a-input-password v-model:value="formData.password" /&gt;
 &nbsp; &nbsp; &nbsp;&lt;/a-form-item&gt;
&ZeroWidthSpace;
 &nbsp; &nbsp; &nbsp;&lt;a-form-item name="remember" :wrapper-col="{ offset: 8, span: 16 }"&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;a-checkbox v-model:checked="formData.remember"&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;  记得我
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;/a-复选框&gt;
 &nbsp; &nbsp; &nbsp;&lt;/a-form-item&gt;
&ZeroWidthSpace;
 &nbsp; &nbsp; &nbsp;&lt;a-form-item :wrapper-col="{ offset: 8, span: 16 }"&gt;
 &nbsp; &nbsp; &nbsp; &nbsp;&lt;a-button type="primary" html-type="submit"&gt;继续&lt;/a-button&gt;
 &nbsp; &nbsp; &nbsp;&lt;/a-form-item&gt;
 &nbsp; &nbsp;&lt;/a-form&gt;
 &nbsp;&lt;/div&gt;
&lt;/模板&gt;
&ZeroWidthSpace;
&lt;脚本设置&gt;
从“vue”导入 { ref }；
&ZeroWidthSpace;
常量 formData = ref({
  用户名： ””，
  密码： ””，
  记住：真的，
});
&ZeroWidthSpace;
const onSubmit = async (_formData) =&gt; {
  console.log("表单提交！:", _formData);
  const response = await fetch("https://some.api/process-form", {
 &nbsp;  方法：“POST”，
 &nbsp;  正文：_formData，
  });
};
&ZeroWidthSpace;
常量 onError = (errorInfo) =&gt; {
  console.log("失败：", errorInfo);
};
&lt;/脚本&gt;<div class="hide-preCode-box"><span class="hide-preCode-bt" data-report-view="{&quot;spm&quot;:&quot;1001.2101.3001.7365&quot;}"><img class="look-more-preCode contentImg-no-view" src="https://csdnimg.cn/release/blogv2/dist/pc/img/newCodeMoreWhite.png" alt="" title=""></span></div></pre> 
<p>在上面的代码中，我们定义了一个响应式对象，formData带有一些默认的空字符串，我们还使用v-model表单绑定将此数据绑定到我们的 ant-design-vue 表单输入组件。我们还创建了一个自定义函数onSubmit并将其附加到我们的 ant-design-vue 表单组件，以将我们的 formData 提交给一些虚构的 API 进行处理，以及一个onError用于处理在验证表单时发生的任何错误的函数。</p> 
<p>此外，此代码示例还展示了 ant-design-vue 组件中包含的自定义属性如何简化表单验证过程并使其可访问。</p> 
<hr>
<p>超过 20 万开发人员使用 LogRocket 来创造更好的数字体验了解更多 →</p> 
<hr>
<p>以下是我们运行应用程序时表单的输出：</p> 
<p></p> 
<p>如果你想在 Vue 3 中创建复杂的表单，你还应该阅读这篇关于 v-model 的文章。</p> 
<h2><a name="t5"></a>蚂蚁设计图标</h2> 
<p>图标在使应用程序设计更加丰富和有吸引力方面发挥着重要作用。Ant Design 系统是有意识的。</p> 
<p>Ant 设计团队还开发了一个外部包，可让您快速向应用程序添加丰富的图标，包括轮廓、实体甚至双色调图标。</p> 
<p>你可以很容易地在你的 Vue 项目中安装图标包：</p> 
<pre data-index="8">npm install @ant-design/icons-vue</pre> 
<p>这是我们如何导入三种不同的火箭图标样式的示例：</p> 
<pre data-index="9">&lt;模板&gt;
  &lt;div&gt;
    &lt;火箭概述/&gt;
    &lt;装满火箭的/&gt;
    &lt;rocket-two-tone two-tone-color="#eb2f96" /&gt;
  &lt;/div&gt;
&lt;/模板&gt;

<p>&lt;脚本设置&gt;<br>进口 {<br>  火箭概述，<br>  火箭填充，<br>  火箭双音，<br>} 来自“@ant-design/icons-vue”；<br>&lt;/脚本&gt;</pre> </p>
<p>运行此代码会产生以下结果：</p> 
<p></p> 
<p>要添加额外的交互，我们还可以将自定义旋转和旋转属性应用于任何图标。</p> 
<pre data-index="10">&lt;模板&gt;
  &lt;div class="center"&gt;
 &nbsp;  &lt;rocket-two-tone two-tone-color="#eb2f96" :rotate="50" /&gt;
 &nbsp;  &lt;reload-outlined spin /&gt;
  &lt;/div&gt;
&lt;/模板&gt;
&ZeroWidthSpace;
&lt;脚本设置&gt;
从“@ant-design/icons-vue”导入 { RocketTwoTone, ReloadOutlined }；
&lt;/脚本&gt;</pre> 
<p>这导致以下输出：</p> 
<p></p> 
<h2><a name="t6"></a>结论</h2> 
<p>Ant Design 是一款出色的工具，可以轻松创建网站。它是一个适应性很强的框架，允许您创建具有很大灵活性的简单网站。在整篇文章中，我们研究了如何在 Vue 3 中使用 ant-design-vue 包。我们还讨论了如何使用 ant-icon 以及如何处理基本的表单提交。</p> 
<p>ant-design-vue 包的文档页面是了解所提供的所有组件的绝佳起点</p>
]]></content>
      
        <categories>
            
            <category> vue3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Vue3的状态管理-Store，Vuex和Pinia的对比]]></title>
      <url>/2023/02/25/2023031401/</url>
      <content type="html"><![CDATA[<h2>Vue3的状态管理-Store，Vuex和Pinia的对比</h2>
<h3>什么是状态管理</h3> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;理论上来说，每一个 Vue 组件实例都已经在“管理”它自己的响应式状态了</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;它是一个独立的单元，由以下几个部分组成</p> 
<ul><li><strong>状态</strong>：驱动整个应用的数据源；</li><li><strong>视图</strong>：对<strong>状态</strong>的一种声明式映射；</li><li><strong>交互</strong>：状态根据用户在<strong>视图</strong>中的输入而作出相应变更的可能方式。</li></ul>
<p><img alt="" height="456" src="/img/pic/1f4d0e4f35d74231829646ea6846c79b.png" width="496"></p> 
<p></p> 
<h1><a name="t1"></a>Vuex和Pinia的区别</h1> 
<h2><a name="t2"></a>&nbsp; &nbsp; Vuex：</h2> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.由state,getters,<a href="/2023/03/14/2023031401/" data-tit="mutations" data-pretit="mutations">mutations</a>,actions,modules组成</p> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;2.通过mutations修改state</p> 
<h3><a name="t3"></a>&nbsp; &nbsp; &nbsp; &nbsp;优点：</h3> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持调试功能，如时间旅行和编辑</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;适用于大型、高复杂度的Vue.<a href="/2023/03/14/2023031401/" target="_blank" class="hl hl-1" data-tit="js项目" data-pretit="js项目">js项目</a></p> 
<h3><a name="t4"></a>&nbsp;&nbsp;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&ZeroWidthSpace;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;缺点：</h3> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;&nbsp;服务器端呈现的，则会<strong>将您的应用程序暴露给安全漏洞</strong></p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;getter 在通过方法访问时，每次都会去进行调用，而不会缓存结果。</p> 
<h2><a name="t5"></a>&nbsp; &nbsp; Pinia：&nbsp; &nbsp;</h2> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 1.由state，getters，actions组成</p> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 2.通过getters,actions修改state，也可以通过$patch</p> 
<h3><a name="t6"></a>&nbsp; &nbsp; &nbsp; &nbsp; 优点：</h3> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;完整的 TypeScript 支持：与在 Vuex 中添加 TypeScript 相比，添加 TypeScript 更容易</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;极其轻巧(体积约 1KB)</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;store 的 action 被调度为常规的函数调用，而不是使用 dispatch 方法或 MapAction 辅助函数，这在 Vuex 中很常见</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持多个Store</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;支持 Vue devtools、SSR 和 webpack 代码拆分</p> 
<h3><a name="t7"></a>&nbsp; &nbsp; &nbsp; &nbsp; 缺点：</h3> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;不支持时间旅行和编辑等调试功能</p> 
<h1><a name="t8"></a>Vuex状态管理</h1> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; 对于已经有过Vue2项目经验的来说，可能Vuex更加熟悉。</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vuex 是一个专为 Vue.js 应用程序开发的<strong>状态管理模式 + 库</strong>。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。</p> 
<h2><a name="t9"></a>&nbsp; &nbsp; &nbsp; &nbsp; 安装：</h2> 
<blockquote> 
 <p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;npm install vuex@next --save</p> 
</blockquote> 
<h2><a name="t10"></a>&nbsp; &nbsp; &nbsp; &nbsp; 开始：</h2> 
<h3><a name="t11"></a>主页面：</h3> 
<blockquote> 
 <p>&lt;template&gt;</p> 
 <p>&nbsp; &lt;div class="home"&gt;</p> 
 <p>&nbsp; &nbsp; &lt;div&gt;Store:&lt;/div&gt;</p> 
 <p>&nbsp; &nbsp; &lt;ChildViewVue&gt;&lt;/ChildViewVue&gt;</p> 
 <p>&nbsp; &lt;/div&gt;</p> 
 <p>&lt;/template&gt;</p> 
 <p></p> 
 <p>&lt;script lang="ts" setup&gt;</p> 
 <p>import { reactive, ref, computed } from 'vue';</p> 
 <p>import ChildViewVue from './ChildView.vue';</p> 
 <p>import { useStore } from 'vuex';</p> 
 <p>const store = useStore();</p> 
 <p>console.log('const store = useStore();', store.state.count)</p> 
 <p>const count = computed(() =&gt; store.state.count)</p> 
 <p>&lt;/script&gt;</p> 
 <p></p> 
</blockquote> 
<h3><a name="t12"></a>子页面：</h3> 
<blockquote> 
 <p>&lt;template&gt;</p> 
 <p>&nbsp; &lt;div class="ChildView"&gt;</p> 
 <p></p> 
 <p>&nbsp; &nbsp; &lt;button @click="clickChange"&gt;修改store&lt;/button&gt;</p> 
 <p>&nbsp; &lt;/div&gt;</p> 
 <p>&lt;/template&gt;</p> 
 <p>&lt;script lang="ts" name="ChildView" setup&gt;</p> 
 <p>import { ref, watch } from 'vue'</p> 
 <p>import { useStore } from 'vuex';</p> 
 <p>const store = useStore();</p> 
 <p>const clickChange = () =&gt; {</p> 
 <p>&nbsp; let random = Math.floor(Math.random() * 10 + 1)</p> 
 <p>&nbsp; store.commit('CHANGE_COUNT',random)</p> 
 <p>}</p> 
 <p>&lt;/script&gt;</p> 
</blockquote> 
<h3><a name="t13"></a>store:</h3> 
<blockquote> 
 <p>import { createStore } from 'vuex';</p> 
 <p></p> 
 <p>export default createStore({</p> 
 <p>&nbsp; state: {</p> 
 <p>&nbsp; &nbsp; count: 0</p> 
 <p>&nbsp; },</p> 
 <p>&nbsp; getters: {},</p> 
 <p>&nbsp; mutations: {</p> 
 <p>&nbsp; &nbsp; CHANGE_COUNT(state: { count: any }, data: any) {</p> 
 <p>&nbsp; &nbsp; &nbsp; state.count = data;</p> 
 <p>&nbsp; &nbsp; }</p> 
 <p>&nbsp; },</p> 
 <p>&nbsp; actions: {},</p> 
 <p>&nbsp; modules: {}</p> 
 <p>});</p> 
 <p></p> 
</blockquote> 
<h1 id="why-should-i-use-pinia" style="margin-left:0px;"><a name="t14"></a><span style="color:#2c3e50;"><span style="background-color:#ffffff;">Pinia状态管理</span></span></h1> 
<p><span style="color:#2c3e50;"><span style="background-color:#ffffff;">&nbsp; &nbsp; &nbsp;</span></span>Pinia 是 Vue 的存储库，它允许您跨组件/页面共享状态。如果您熟悉 Composition API，您可能会认为您已经可以使用简单的<code>export const state = reactive(&#123;&#125;)</code>.&nbsp;这对于单页应用程序来说是正确的，但如果它是服务器端呈现的，则会<strong>将您的应用程序暴露给<a href="https://vuejs.org/guide/scaling-up/ssr.html#cross-request-state-pollution" title="安全漏洞。">安全漏洞。</a></strong></p> 
<ul><li>更强的团队协作约定</li><li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试</li><li>模块热更新 (HMR)</li><li>服务端渲染支持</li></ul>
<blockquote>
 npm install pinia
</blockquote> 
<p></p> 
<h2><a name="t15"></a>主页面：</h2> 
<blockquote> 
 <p>&lt;template&gt;</p> 
 <p>&nbsp; &lt;div class="home"&gt;</p> 
 <p>&nbsp; &nbsp; &lt;div&gt;pinia：&lt;/div&gt;</p> 
 <p>&nbsp; &nbsp; &lt;ChildViewVue&gt;&lt;/ChildViewVue&gt;</p> 
 <p>&nbsp; &lt;/div&gt;</p> 
 <p>&lt;/template&gt;</p> 
 <p></p> 
 <p>&lt;script lang="ts" setup&gt;</p> 
 <p>import { reactive, ref, computed } from 'vue';</p> 
 <p>import ChildViewVue from './ChildView.vue';</p> 
 <p>import { changeNum } from "@/store";</p> 
 <p>import { storeToRefs } from 'pinia'</p> 
 <p>const store = changeNum()</p> 
 <p>const { count } = storeToRefs(store)</p> 
 <p>&lt;/script&gt;</p> 
 <p></p> 
</blockquote> 
<h2><a name="t16"></a>子页面</h2> 
<blockquote> 
 <p>&lt;template&gt;</p> 
 <p>&nbsp; &lt;div class="ChildView"&gt;</p> 
 <p>&nbsp; &nbsp; &lt;button @click="clickChange"&gt;修改store&lt;/button&gt;</p> 
 <p>&nbsp; &lt;/div&gt;</p> 
 <p>&lt;/template&gt;</p> 
 <p>&lt;script lang="ts" name="ChildView" setup&gt;</p> 
 <p>import { ref, watch } from 'vue'</p> 
 <p>import { changeNum } from "@/store";</p> 
 <p>const store = changeNum()</p> 
 <p>const clickChange = () =&gt; {</p> 
 <p>&nbsp; let random = Math.floor(Math.random() * 10 + 1)</p> 
 <p>&nbsp; store.CHANGE_COUNT(random)</p> 
 <p>}</p> 
 <p>&lt;/script&gt;</p> 
</blockquote> 
<p></p> 
<h2><a name="t17"></a>store</h2> 
<blockquote> 
 <p>import { defineStore } from 'pinia';</p> 
 <p>export const changeNum = defineStore('main', {</p> 
 <p>&nbsp; state: () =&gt; ({ count: 0 }),</p> 
 <p>&nbsp; getters: {},</p> 
 <p>&nbsp; actions: {</p> 
 <p>&nbsp; &nbsp; CHANGE_COUNT(data: any) {</p> 
 <p>&nbsp; &nbsp; &nbsp; this.count = data;</p> 
 <p>&nbsp; &nbsp; }</p> 
 <p>&nbsp; }</p> 
 <p>});</p> 
</blockquote> 
<h2><a name="t18"></a>main.ts</h2> 
<blockquote> 
 <p>import { createApp } from 'vue'</p> 
 <p>import App from './App.vue'</p> 
 <p>import router from './router'</p> 
 <p>import { createPinia } from 'pinia'</p> 
 <p>createApp(App).use(createPinia()).use(router).mount('#app')</p> 
</blockquote> 
<h1><a name="t19"></a>总结</h1> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; 根据Vue官方回答：</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现有用户可能对&nbsp;<a href="https://vuex.vuejs.org/zh/" title="Vuex">Vuex</a>&nbsp;更熟悉，它是 Vue 之前的官方状态管理库。由于 Pinia 在生态系统中能够承担相同的职责且能做得更好，因此 Vuex 现在处于维护模式。它仍然可以工作，但不再接受新的功能。对于新的应用，建议使用 Pinia</p> 
<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实上，<strong>Pinia 最初正是为了探索 Vuex 的下一个版本而开发的，因此整合了核心团队关于 Vuex 5 的许多想法</strong>。最终，我们意识到 Pinia 已经实现了我们想要在 Vuex 5 中提供的大部分内容，因此决定将其作为新的官方推荐。</p> 
<p>相比于 Vuex，Pinia 提供了更简洁直接的 API，并提供了组合式风格的 API，最重要的是，在使用 TypeScript 时它提供了更完善的类型推导</p> 
<p>&nbsp; &nbsp; &nbsp; &nbsp; 总得来说，Vuex目前是能够满足我们日常项目需求，等Vuex下一个版本，可能就要使用Pinia了。</p> 
]]></content>
      
        <categories>
            
            <category> vue3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue3如何部署到windows服务器上]]></title>
      <url>/2023/02/16/2023021602/</url>
      <content type="html"><![CDATA[<H3>这里介绍部署到windows服务器上</H3>

<h4>部署到IIS</h4>
<p>1.生成部署的静态文件 </p>
 <p>在vite.config.js里配置输出文件的目录</p>
 <img src="/img/pic/20230216155545.png"><br>
 <p>在项目的目录内右键点击"Git Bash Here"<br>
  <b>执行 npm run build</b>，生成的文件就要部署的文件了</p>

<p>2.部署到服务器的IIS</p><br>
<span>确认服务器是否安装了IIS，安装后在IIS里新建网站,物理目录指向部署的文件目录，就可以正常访问了。</span>

<h4>部署到Nginx </h4>
<p>1.安装Nginx</p>
<span>Nginx<a href="http://nginx.org/en/download.html" target="_parent">下载地址</a>我用1.23.3版本</span><br>
<span>下载后解压到部署的盘内，将vue项目打包后，把目录dist拷贝到html里面</span>
 <img src="/img/pic/20230216162341.png"><br>
 <img src="/img/pic/20230216162742.png"><br>
<p>2.配置Nginx</p>
<span>
因为现在是把vue前端交给了Nginx代理，所以这里的端口号不一定是我们在vue项目中设置的端口号。这里的端口号必须是当前服务器开放的端口号。</span>
server_name是服务器的外网ip地址， listen是开发的端口号，root配置项目的实际文件目录<br>
<img src="/img/pic/20230216163510.png"><br>

<p>启动Nginx</p>
<span>打开Nginx安装路径下的命令行</span>

<p><span>执行：start nginx</span><br><img src="/img/pic/20230216164806.png"><br><br><span>最后在浏览器输入地址和端口就可以访问了</span></p>
]]></content>
      
        <categories>
            
            <category> vue3 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> nodejs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[C# 生成日志文件的方式]]></title>
      <url>/2023/02/16/2023021601/</url>
      <content type="html"><![CDATA[<H3>C# 生成日志文件的方式</H3>
<pre>
    using System.IO;
    using System.Text;

<pre><code class="hljs">public static void WriteLog(string message)
    &#123;
        try
        &#123;
            string path = AppDomain.CurrentDomain.BaseDirectory + &quot;Log&quot; + &quot;\\&quot;;
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
            path = path + DateTime.Now.ToString(&quot;yyyy-MM-dd&quot;) + &quot;\\&quot;;
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
            string logFileName = path + DateTime.Now.ToString(&quot;HH-00-00&quot;) + &quot;.log&quot;;
            using (TextWriter logFile = TextWriter.Synchronized(File.AppendText(logFileName)))
            &#123;
                logFile.WriteLine(DateTime.Now + &quot;\t&quot; + message);
                logFile.Flush();
                logFile.Close();
            &#125;

        &#125;
        catch (Exception ex)
        &#123;
           
        &#125;
    &#125;
</code></pre>
<p></pre></p>
]]></content>
      
        <categories>
            
            <category> C# </category>
            
        </categories>
        
        
        <tags>
            
            <tag> C# </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[昨天的你]]></title>
      <url>/2023/02/10/2023021002/</url>
      <content type="html"><![CDATA[<p>我似乎记不清你的模样，</p>

<p>因为白天总是看见阳光，</p>

<p>黑夜里隐隐闪烁你的獠牙。</p>

<p>如果眼瞎了，是不是脑海里会总浮现你的面孔，</p>

<p>还有那双坚定的眼眸。</p>

<p>你应该一如既往地奔跑着，</p>

<p>前方有你的目标，后面还是有一双手推着吗？</p>

<p>还是你自己情愿如此疲惫不堪下去。</p>

<p>远行不是目的，目的是为了归来，归来时仍然从容，从容为了更好的远行。</p>

<P>孤独是因为没有人懂得你的苦心</P>

<p>爱情是这个世界上最脆弱的情感，容易被情绪左右，容易受旁言困惑，容易被诱惑困住，</p>
<P>所以才更容易失去信心，因此爱情才是最被世人所渴望的情感。</p>

<p>那时，像春天的一缕晨光，相见短暂，总能时时刻刻地去思念忧虑;</p

<p>期间，像夏天的酷热暴雨，挥霍时光，即使浑浑噩噩也从不去争取;</p

<p>此时，像冬天的午时温度，追寻幸福，难道缘起缘灭只能成为束缚。</p>]]></content>
      
        <categories>
            
            <category> 心屋 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 情感 </tag>
            
            <tag> 诗歌 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[vue3使用经验与问题总结]]></title>
      <url>/2023/02/10/2023021001/</url>
      <content type="html"><![CDATA[<H3>vue的使用经验</H3>
<P>开始接触vue比较晚，上手的问题总是反反复复的出现，甚至还会被迫创建无数次项目</P>
<h4>vue的常用命令</h4>
 <p><b>1.安装nodejs最新的长期维护版</b></p>
 <p>https://nodejs.org/zh-cn/<br></p>
 <p>根据安装的目录，检查设置的环境变量</p>
 <p><b>2.安装yarn</b></p>
 <p>右键nodejs 管理员身份运行，npm install -g yarn </p>
 <p>查看yarn 版本 yarn -v</p>
 <p><b>3.安装vue-cli</b></p>
 <p>输入 npm i -g @vue/cli<br>
   或npm install -g @vue/cli@5.0.8<br>
   查看vue 版本 vue --version<br>
</p>
<p><b>4.安装vite</p>
<p>输入：npm install -g vite</b>
查询vite版本</b>
</p>
<p><b>5.建议重启一下电脑</b><br>
  【如果需要获取github路径的vue项目，如果有package-lock.json则删除掉，执行npm install】<br>
  【如果运行有错误执行语句 npm install --legacy-peer-deps element-ui --save】</p>
 <p><b>6.创建项目<b><br>
    打开Nodejs命令窗口，执行vue ui,打开UI页面</p>
    <img src="/img/pic/20230210210936.png"><br>
    <img src="/img/pic/20230210210936.png"><br>
    <img src="/img/pic/20230210212554.png"><br>
    <img src="/img/pic/20230210212904.png"><br>]]></content>
      
        <categories>
            
            <category> vue </category>
            
        </categories>
        
        
        <tags>
            
            <tag> vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[c# ArrarList和string string[]和ArrarList]]></title>
      <url>/2023/02/05/2023020501/</url>
      <content type="html"><![CDATA[<H3>ArrarList和string</H3>

<H4>string转ArrarList</H4>
<p>
    ArrayList b = new ArrayList(str.Split(','));
</p>


<H4>ArrarList转string</H4>
<p>
    string str= string.Join(",",(string[])list.ToArray(typeof(string)));
</p>


<H3>ArrarList和string[]</H3>

<H4>ArrarList转string[]</H4>
<p>
    string[] arrString =(string[])list.ToArray(typeof(string));
</p>


<H4>string[]转ArrarList</H4>
<p>
   ArrayList list = new ArrayList(new string[]{"111","222"});
</p>

]]></content>
      
        <categories>
            
            <category> 关于 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关于 </tag>
            
            <tag> 网站介绍 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[我开了自己的博客了]]></title>
      <url>/2023/02/01/hello-world/</url>
      <content type="html"><![CDATA[<H2>初衷</H2>
  <p>拥有属于自己的一个博客域名，分享一些技术开发的心得</p>
 <br>
 <p>
     突然想自己弄一个博客了，感觉起步有点晚了，又新发现的博客组合Hexo+Github，所以照着网上搜的教程一步一步的实现，
 </p>
 <p>
     我的域名是https://www.cpwip.com/是在华为云买的，前期看看博客的情况再是否需要购买独立的服务器
 </p>
]]></content>
      
        <categories>
            
            <category> 关于 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 关于 </tag>
            
            <tag> 网站介绍 </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
